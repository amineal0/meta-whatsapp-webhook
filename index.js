const express = require("express");
const app = express();

app.use(express.json());

// ‚öôÔ∏è Variables (mets la vraie valeur de VERIFY_TOKEN dans Render > Environment)
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "mon_token_secret";

// ‚úÖ Endpoint de v√©rification du webhook (appel√© une seule fois par Meta)
app.get("/webhook", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  if (mode === "subscribe" && token === VERIFY_TOKEN) {
    console.log("‚úîÔ∏è Webhook v√©rifi√© par Meta.");
    return res.status(200).send(challenge);
  }
  console.log("‚ùå V√©rification √©chou√©e.");
  return res.sendStatus(403);
});

// üì© R√©ception des messages entrants WhatsApp
app.post("/webhook", (req, res) => {
  console.log("üì® Message entrant :", JSON.stringify(req.body, null, 2));
  // üëâ Ici tu peux traiter le message, r√©pondre via l'API WhatsApp, etc.
  res.sendStatus(200);
});

// üåê Page d‚Äôaccueil simple (pour v√©rifier que le service tourne)
app.get("/", (_req, res) => {
  res.send("Webhook WhatsApp Cloud API actif ‚úÖ");
});

// üöÄ Lancer le serveur (Render injecte PORT en variable d'environnement)
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Serveur d√©marr√© sur port ${PORT}`));
